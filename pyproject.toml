[project]
name = "ai-dataresearch"
version = "4.0.0"
description = "AI-powered dataset research assistant with breakthrough 68.1% NDCG@3 neural ranking performance"
readme = "Readme.md"
license = {text = "MIT"}
authors = [
    {name = "AI Data Research Team"},
]
maintainers = [
    {name = "AI Data Research Team"},
]
keywords = [
    "ai", "machine-learning", "deep-learning", "ranking", "recommendation", 
    "neural-networks", "transformers", "cross-attention", "datasets", "research"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.12"
dependencies = [
    # Core Data & ML Libraries
    "numpy>=1.26.0,<2.2.0",
    "pandas>=2.3.0",
    "scikit-learn>=1.7.0",
    "scipy>=1.14.0",
    # Deep Learning & Neural Networks
    "torch>=2.7.1",
    "transformers>=4.52.4",
    "sentence-transformers>=4.1.0",
    "tokenizers>=0.20.0",
    "safetensors>=0.4.0",
    "accelerate>=1.2.0",
    # TensorFlow (optional for some features)
    "tensorflow>=2.19.0",
    "tf-keras>=2.19.0",
    # Data Processing
    "datasets>=3.6.0",
    "joblib>=1.5.1",
    "pyyaml>=6.0.2",
    "requests>=2.32.4",
    "python-dotenv>=1.0.0",
    "jsonlines>=4.0.0",
    "python-dateutil>=2.9.0",
    # Visualization & UI
    "matplotlib>=3.10.3",
    "seaborn>=0.13.2",
    "plotly>=5.24.0",
    "rich>=14.0.0",
    "textual>=3.5.0",
    "tqdm>=4.67.1",
    # API & Web Framework
    "fastapi>=0.115.0",
    "uvicorn>=0.32.0",
    "httpx>=0.28.0",
    # Data Formats
    "openpyxl>=3.1.0",
    "h5py>=3.12.0",
    "aiohttp>=3.12.13",
    "pydantic>=2.11.7",
    "websockets>=15.0.1",
    "tenacity>=9.1.2",
    "anthropic>=0.54.0",
    "openai>=1.90.0",
    "mistralai>=1.8.2",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
]

# Production deployment dependencies
production = [
    "gunicorn>=23.0.0",
    "redis>=5.2.0",
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "celery>=5.4.0",
]

# Cloud storage dependencies
cloud = [
    "boto3>=1.35.0",
    "google-cloud-storage>=2.18.0",
    "azure-storage-blob>=12.23.0",
]

# Advanced ML dependencies
advanced-ml = [
    "xgboost>=2.1.0",
    "lightgbm>=4.5.0",
    "catboost>=1.2.0",
]

# NLP dependencies
nlp = [
    "spacy>=3.8.0",
    "nltk>=3.9.0",
    "textblob>=0.18.0",
]

# Monitoring dependencies
monitoring = [
    "wandb>=0.18.0",
    "tensorboard>=2.18.0",
    "mlflow>=2.18.0",
]

# Vector database dependencies
vector-db = [
    "pinecone-client>=5.0.0",
    "weaviate-client>=4.9.0",
    "chromadb>=0.5.0",
]

# Complete installation with all features
all = [
    "ai-dataresearch[dev,production,cloud,advanced-ml,nlp,monitoring,vector-db]"
]

[project.urls]
Homepage = "https://github.com/ai-dataresearch/ai-dataresearch"
Documentation = "https://github.com/ai-dataresearch/ai-dataresearch/blob/main/Readme.md"
Repository = "https://github.com/ai-dataresearch/ai-dataresearch"
"Bug Tracker" = "https://github.com/ai-dataresearch/ai-dataresearch/issues"

[project.scripts]
# Command line interfaces for pipelines
ai-data-pipeline = "data_pipeline:main"
ai-ml-pipeline = "ml_pipeline:main"
ai-dl-pipeline = "dl_pipeline:main"
ai-main = "main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/config",
    "/data",
    "/tests",
    "/docs",
    "/scripts",
    "/*.py",
    "/*.md",
    "/*.toml",
    "/*.txt",
]

# Development tool configurations
[tool.black]
line-length = 88
target-version = ['py312']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
  | outputs
  | logs
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \\.not slow\\.')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "api: marks tests that require API keys",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\.\\.Protocol\\.:",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "tensorflow.*",
    "transformers.*",
    "sentence_transformers.*",
    "datasets.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]
